import React, {useState} from 'react';import styles from './contact-form.module.scss';import {getContent} from '../../api/apolloClientContext';function ContactForm ({withMessage}) {	const {globalItems} = getContent();	console.log('globalItems =>', getContent());	const [email, setEmail] = useState('');	const [message, setMessage] = useState('');	const [submitting, setSubmitting] = useState(false);	const handleSubmit = event => {		event.preventDefault();		console.log(event.target);		if(!message){			setMessage('Contact me for cooperation.'); //Default message		}		setSubmitting(!submitting);	};	// const handleSubmit = event => {	// 	event.preventDefault();	// 	setSubmitting(true); // Set the submitting state to true	// 	// Send the form data to an email service (e.g. emailjs)	// 	// You need to replace the service ID, template ID and user ID with your own	// 	emailjs.sendForm('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', event.target, 'YOUR_USER_ID')	// 		.then(result => {	// 			alert('Email sent successfully!'); // Show a success message to the user	// 			setSubmitting(false); // Reset the submitting state	// 		})	// 		.catch(error => {	// 			alert('Something went wrong. Please try again.'); // Show an error message to the user	// 			setSubmitting(false); // Reset the submitting state	// 		});	// }	return (		<div className={`${styles['signUpForm']} ${withMessage?styles['--withMessage']:''}`}>			{/*{submitting && <div>Submitting Form...</div>}*/}			<form				className={`${styles['o-container']} ${withMessage?styles['--withMessage']:''}`}				onSubmit={handleSubmit}			>				<div className={styles['m-fieldContainer']}>				<input					className={styles['a-emailField']}					name="email"					type="email"					value={email}					placeholder={globalItems.formTypeYourEmail}					onChange={e => setEmail(e.target.value)}				/>				<img					className={styles['a-emailField-icon']}					src="/email-input.svg"					alt=""/>				</div>				{withMessage&&				<div className={styles['m-fieldContainer']}>					<textarea						className={styles['a-messageField']}						name="message"						value={message}						placeholder={globalItems.formMessagePlaceholder}						onChange={e => setMessage(e.target.value)}					/>				</div>				}				<button className={`${styles['a-button']} ${withMessage?styles['--withMessage']:''}`}>					{globalItems.btnSubmit}				</button>			</form>		</div>	);}export default ContactForm;