import React, { useRef, useState } from 'react';import * as yup from 'yup';import { getContent } from '../../api/apolloClientContext';import FormValidationNotification from '../FormValidationNotification/FormValidationNotification';import sanitize from 'sanitize-html';import styles from './form-contact.module.scss';function FormContact ({ withMessage }) {	const { globalItems } = getContent();	const [email, setEmail] = useState('');	const [message, setMessage] = useState('');	/* eslint-disable-next-line no-unused-vars */	const [submitStatus, setSubmitStatus] = useState('');	const [showNotification, setShowNotification] = useState(false);	const [notificationClass, setNotificationClass] = useState('');	const form = useRef();	const statuses = {		sSuccess: 'success',		sError: 'error',		sWarning: 'warning'	};	const {		sSuccess,		sError,		sWarning	} = statuses;	const schema = yup.object().shape({		email: yup.string().email().required()	});	const clearForm = () => {		setEmail('');		setMessage('');	};	const emailRecipients = [		process.env.NEXT_PUBLIC_EMAIL_TO_1,		process.env.NEXT_PUBLIC_EMAIL_TO_2,		process.env.NEXT_PUBLIC_EMAIL_TO_3	].filter((el) => {		if (el) {			return el;		}	});	const applyClass = (input, notificationClass) => {		if (input) {			const element = document.getElementById(input);			element.className = `${element.className} ${styles[`--${notificationClass}`]} ${withMessage ? styles['--withMessage'] : ''}`;		}	};	const resetClass = (input) => {		if (input) {			const element = document.getElementById(input);			if (element.name === 'email') {				element.className = `${styles['a-emailField']}`;			}			if (element.name === 'message') {				element.className = `${styles['a-messageField']}`;			}		}	};	const emailBody = `<div><p>${email}</p><p>${sanitize(message)}</p></div>`;	const handleInputChange = (input) => {		const {			value,			name		} = input;		const invalidInput = /<(.|\n)*?>/.test(value);		if (!invalidInput) {			if (name === 'email') {				setEmail(value);				input.className = `${styles['a-emailField']} ${withMessage ? styles['--withMessage'] : ''}`;			}			if (name === 'message') {				setMessage(value);				input.className = `${styles['a-messageField']}`;			}		}		if (invalidInput) {			input.className = `${input.className} ${styles[`--${sWarning}`]} ${withMessage ? styles['--withMessage'] : ''}`;		}	};	const handleSubmit = event => {		event.preventDefault();		const emailInput = Object.values(event.target).filter((el) => {			if (el.name === 'email') {				return el;			}		})[0]?.id;		const messageInput = Object.values(event.target).filter((el) => {			if (el.name === 'message') {				return el;			}		})[0]?.id;		const hideNotification = () => {			setShowNotification(false);			setNotificationClass('');			resetClass(emailInput);			resetClass(messageInput);		};		schema.isValid({			email		}).then(valid => {			if (valid) {				/* eslint-disable-next-line no-undef */				Email.send({					SecureToken: process.env.NEXT_PUBLIC_EMAIL_TOKEN,					From: process.env.NEXT_PUBLIC_EMAIL_FROM,					To: emailRecipients,					Subject: process.env.NEXT_PUBLIC_EMAIL_SUBJECT,					Body: emailBody				}).then((result) => {					clearForm();					setSubmitStatus(result.text);					setSubmitStatus(sSuccess);					setNotificationClass(sSuccess);					applyClass(emailInput, sSuccess);					applyClass(messageInput, sSuccess);					setShowNotification(true);				}, (error) => {					setSubmitStatus(error.text);					setSubmitStatus(sError);					setNotificationClass(sError);					applyClass(emailInput, sError);					applyClass(messageInput, sError);					setShowNotification(true);				});				setTimeout(hideNotification, 5000);			}			if (!valid) {				setNotificationClass(sWarning);				applyClass(emailInput, sWarning);				setShowNotification(true);				setTimeout(hideNotification, 5000);			}		});	};	return (<div className={`${styles.signUpForm} ${withMessage ? styles['--withMessage'] : ''}`}>		<form			className={`${styles['o-container']} ${withMessage ? styles['--withMessage'] : ''}`}			ref={form}			onSubmit={handleSubmit}		>			<div className={styles['m-fieldContainer']}>				<input					id={`${withMessage ? 'formEmailMessage' : 'formEmail'}`}					className={`${styles['a-emailField']}`}					name="email"					value={email}					placeholder={globalItems.formTypeYourEmail}					onChange={e => handleInputChange(e.target)}				/>				<img					className={styles['a-emailField-icon']}					src="/email-input.svg"					alt="" />			</div>			{withMessage && <div className={styles['m-fieldContainer']}>				<textarea					id="formMessage"					className={`${styles['a-messageField']}`}					name="message"					value={message}					placeholder={globalItems.formMessagePlaceholder}					onChange={e => handleInputChange(e.target)}				/>			</div>}			<input id="submit" type="submit" value={globalItems.btnSubmit}				className={`${styles['a-button']} ${withMessage ? styles['--withMessage'] : ''}`} />		</form>		<FormValidationNotification showNotification={showNotification} notificationClass={notificationClass}			withMessage={withMessage} />	</div>	);}export default FormContact;
