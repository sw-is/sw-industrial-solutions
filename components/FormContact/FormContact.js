import React, { useRef, useState } from "react";import emailjs from '@emailjs/browser';import {getContent} from '../../api/apolloClientContext';import styles from './form-contact.module.scss';function FormContact ({withMessage}) {	const {globalItems} = getContent();	const [email, setEmail] = useState('');	const [message, setMessage] = useState('');	const [submitting, setSubmitting] = useState(false);	const [error, setError] = useState(false);	const form = useRef();	const handleSubmit = event => {		event.preventDefault();		console.log(event.target);		if (email) {			setSubmitting(true);			emailjs.sendForm('service_wnh1gd5', 'template_93sxo8c', form.current, '1B4AYiPagKWHSBxUh')				.then((result) => {					console.log(result.text);					setSubmitting(false);				}, (error) => {					console.log(error.text);					setError(true);					setSubmitting(false);				});		}	};	// const handleSubmit = event => {	// 	event.preventDefault();	// 	setSubmitting(true); // Set the submitting state to true	// 	// Send the form data to an email service (e.g. emailjs)	// 	// You need to replace the service ID, template ID and user ID with your own	// 	emailjs.sendForm('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', event.target, 'YOUR_USER_ID')	// 		.then(result => {	// 			alert('Email sent successfully!'); // Show a success message to the user	// 			setSubmitting(false); // Reset the submitting state	// 		})	// 		.catch(error => {	// 			alert('Something went wrong. Please try again.'); // Show an error message to the user	// 			setSubmitting(false); // Reset the submitting state	// 		});	// }	return (		<div className={`${styles['signUpForm']} ${withMessage?styles['--withMessage']:''}`}>			{/*{submitting && <div>Submitting Form...</div>}*/}			<form				className={`${styles['o-container']} ${withMessage?styles['--withMessage']:''}`}				ref={form}				onSubmit={handleSubmit}			>				<div className={styles['m-fieldContainer']}>				<input					className={styles['a-emailField']}					name="email"					type="email"					value={email}					placeholder={globalItems.formTypeYourEmail}					onChange={e => setEmail(e.target.value)}				/>				<img					className={styles['a-emailField-icon']}					src="/email-input.svg"					alt=""/>				</div>				{withMessage&&				<div className={styles['m-fieldContainer']}>					<textarea						className={styles['a-messageField']}						name="message"						value={message}						placeholder={globalItems.formMessagePlaceholder}						onChange={e => setMessage(e.target.value)}					/>				</div>				}				<input id="submit" type="submit" value={globalItems.btnSubmit} className={`${styles['a-button']} ${withMessage?styles['--withMessage']:''}`}/>				{/*<button className={`${styles['a-button']} ${withMessage?styles['--withMessage']:''}`}>*/}				{/*	{globalItems.btnSubmit}*/}				{/*</button>*/}			</form>		</div>	);}export default FormContact;